<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
									 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	
	<modelVersion>4.0.0</modelVersion>
	
	<!-- =============================================================== -->
	<!-- ***** INFORMATIONS DU MODULE WEBAPP ***** -->
	<!-- =============================================================== -->
	
	<!-- ===== PROJET PARENT ===== -->
	
	<!-- On indique ici le projet parent -->
	<parent>
		<!-- artifactId : identifiant du projet parent -->
		<artifactId>ticket</artifactId>
		<!-- groupId : identifiant de l'organisation gérant le projet. Cet identifiant 
			reprend la notation des packages Java. En général, celui-ci correspond au 
			package de base de l'application, mais ce n'est pas obligatoire. Dans le cas 
			d'un module, on reprend obligatoirement le "groupId" du projet parent -->
		<groupId>org.exemple.demo</groupId>
		<!-- version : version du projet. Le suffixe -SNAPSHOT veut dire que le 
			code de cette version de l'application n'est pas figé. C'est une version 
			en cours de développement. Par opposition, si la version ne se termine pas 
			par le suffixe -SNAPSHOT, cela signifie qu'il s'agit d'une release de l'application 
			et que son code est figé. Il faudra donc retirer -SNAPSHOT dans le paramètre 
			<version> -->
		<version>1.0-SNAPSHOT</version>
	</parent>
	
	<!-- ===== AUTRES INFORMATIONS MAVEN ===== -->
	
	<!-- artifactId : identifiant du projet -->
	<artifactId>ticket-webapp</artifactId>
	<!-- packaging : type de packaging devant être généré par Maven (jar, war, 
		ear, ...). -->
	<!-- Place les jsp automatiquement dans le dossier WEB-INF via le plugin 
		"maven-war-plugin" -->
	<packaging>war</packaging>

	<!-- ===== INFORMATIONS GENERALES ===== -->
	
	<!-- name : le nom du module -->
	<name>ticket-webapp Maven Webapp</name>
	<!-- url : URL du projet ou de l'application en production. -->
	<url>http://www.example.com</url>

	<!-- =============================================================== -->
	<!-- ***** PROPERTIES (=> CONSTANTES DU POM) ***** -->
	<!-- =============================================================== -->
	
	<!-- Les properties sont des sortes de constantes. Elles sont remplacées par leur valeur 
		lors de l'exécution de Maven en utilisant la notation ${maPropriete} (qui sera remplacée 
		par la valeur de la propriété maPropriete). -->
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>
		
		<!-- Le nom "public" de l'application -->
        <application.name>TicketTac</application.name>
        <!-- Le format à utiliser pour afficher la date du build -->
        <maven.build.timestamp.format>dd/MM/yyyy</maven.build.timestamp.format>
        <!-- Propriété servant à contourner le bug du non remplacement
             de la propriété maven.build.timestamp lors du filtrage des ressources -->
        <buildTimestamp>${maven.build.timestamp}</buildTimestamp>
	</properties>

	<!-- =============================================================== -->
	<!-- ***** DEPENDENCIES (=> GESTION DES DEPENDANCES) ***** -->
	<!-- =============================================================== -->
	
	<dependencies>

		<!-- ===== MODULES (=> DEPENDANCES) ===== -->

		<dependency>
			<groupId>org.exemple.demo</groupId>
			<artifactId>ticket-business</artifactId>
		</dependency>
		<dependency>
			<groupId>org.exemple.demo</groupId>
			<artifactId>ticket-model</artifactId>
		</dependency>

		<!-- ===== BIBLIOTHEQUES TIERCES ===== -->

		<!-- On ajoute la bibliothèque "commons-collections4" de cette manière. Cette bibliothèque 
			n'est pas enregistrée dans le projet parent. -->
<!-- 		<dependency> -->
<!-- 			<groupId>org.apache.commons</groupId> -->
<!-- 			<artifactId>commons-collections4</artifactId> -->
<!-- 			<version>4.1</version> -->
<!-- 		</dependency> -->

		<!-- On ajoute la bibliothèque "commons-text" de cette manière. Cette bibliothèque 
			n'est pas enregistrée dans le projet parent. La bibliothèque "commons-lang3" qui 
			aurait due être téléchargé par Maven en sera exclue. -->
<!-- 		<dependency> -->
<!-- 			<groupId>org.apache.commons</groupId> -->
<!-- 			<artifactId>commons-text</artifactId> -->
<!-- 			<version>1.1</version> -->
<!-- 			<exclusions> -->
<!-- 				La dépendance vers commons-lang3 est exclue -->
<!-- 				<exclusion> -->
<!-- 					<groupId>org.apache.commons</groupId> -->
<!-- 					<artifactId>commons-lang3</artifactId> -->
<!-- 				</exclusion> -->
<!-- 			</exclusions> -->
<!-- 		</dependency> -->
		
		<!-- Les bibliothèques enregistrées dans le projet parent sont utilisées par ce module. 
			Du coup on peut ajouter ces bibliothèques de la même manière qu'un module. -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
		</dependency>
		<dependency>
			<groupId>javax.validation</groupId>
			<artifactId>validation-api</artifactId>
		</dependency>
<!-- 		<dependency> -->
<!-- 			<groupId>org.apache.bval</groupId> -->
<!-- 			<artifactId>bval-jsr</artifactId> -->
<!-- 		</dependency> -->
<!-- 		<dependency> -->
<!-- 			<groupId>javax.servlet</groupId> -->
<!-- 			<artifactId>servlet-api</artifactId> -->
<!-- 		</dependency> -->

	</dependencies>
	
	<!-- =============================================================== -->
    <!-- ***** BUILD ***** -->
    <!-- =============================================================== -->
    
	<build>
	
		<finalName>ticket-webapp</finalName>
		<pluginManagement><!-- lock down plugins versions to avoid using Maven 
				defaults (may be moved to parent pom) -->
			<plugins>
				<plugin>
					<artifactId>maven-clean-plugin</artifactId>
					<version>3.1.0</version>
				</plugin>
				<!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging -->
				<plugin>
					<artifactId>maven-resources-plugin</artifactId>
					<version>3.0.2</version>
				</plugin>
				<plugin>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>3.8.0</version>
				</plugin>
				<plugin>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>2.22.1</version>
				</plugin>
				<plugin>
					<artifactId>maven-war-plugin</artifactId>
					<version>3.2.2</version>
				</plugin>
				<plugin>
					<artifactId>maven-install-plugin</artifactId>
					<version>2.5.2</version>
				</plugin>
				<plugin>
					<artifactId>maven-deploy-plugin</artifactId>
					<version>2.8.2</version>
				</plugin>
				
				<plugin>
	                <groupId>org.apache.maven.plugins</groupId>
	                <artifactId>maven-war-plugin</artifactId>
	                <configuration>
	                    <webResources>
	                        <resource>
	                            <filtering>true</filtering>
	                            <directory>src/main/webapp</directory>
	                            <includes>
	                            	<!-- fragment JSP contenant le header de toutes les 
	                            		pages HTML de l'application web. -->
	                                <include>jsp/_include/header.jsp</include>
	                                <!-- fragment JSP contenant le footer de toutes les 
	                                	pages HTML de l'application web. -->
	                                <include>jsp/_include/footer.jsp</include>
	                                <!-- page « À propos » où je vais injecter quelques 
	                                	informations sur le projet (version, date du build...) -->
	                                <include>jsp/about.jsp</include>
	                            </includes>
	                        </resource>
	                    </webResources>
	                </configuration>
	            </plugin>
            
			</plugins>
		</pluginManagement>
		
	</build>
	
</project>
