<?xml version="1.0"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"
	xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	
	<modelVersion>4.0.0</modelVersion>
	
	<!-- =============================================================== -->
	<!-- ***** INFORMATIONS DU MODULE MODEL ***** -->
	<!-- =============================================================== -->
	
	<!-- ===== PROJET PARENT ===== -->
	
	<!-- On indique ici le projet parent -->
	<parent>
		<!-- groupId : identifiant de l'organisation gérant le projet. Cet identifiant 
			reprend la notation des packages Java. En général, celui-ci correspond au 
			package de base de l'application, mais ce n'est pas obligatoire. Dans le cas 
			d'un module, on reprend obligatoirement le "groupId" du projet parent -->
		<groupId>org.exemple.demo</groupId>
		<!-- artifactId : identifiant du projet parent -->
		<artifactId>ticket</artifactId>
		<!-- version : version du projet. Le suffixe -SNAPSHOT veut dire que le 
			code de cette version de l'application n'est pas figé. C'est une version 
			en cours de développement. Par opposition, si la version ne se termine pas 
			par le suffixe -SNAPSHOT, cela signifie qu'il s'agit d'une release de l'application 
			et que son code est figé. Il faudra donc retirer -SNAPSHOT dans le paramètre 
			<version> -->
		<version>1.0-SNAPSHOT</version>
	</parent>
	
	<!-- ===== AUTRES INFORMATIONS MAVEN ===== -->
	
	<!-- artifactId : identifiant du module -->
	<artifactId>ticket-model</artifactId>
	
	<!-- packaging : type de packaging devant être généré par Maven (jar, war, 
		ear, ...). -->
	<!-- Le packaging JAR est celui par défault donc pas besoin de le spécifier -->
	<!-- 	<packaging>jar</packaging> -->
	
	<!-- ===== INFORMATIONS GENERALES ===== -->
	
	<!-- name : le nom du module -->
	<name>ticket-model</name>
	<url>http://maven.apache.org</url>
	
	<!-- =============================================================== -->
	<!-- ***** PROPERTIES (=> CONSTANTES DU POM) ***** -->
	<!-- =============================================================== -->
	
	<!-- Les properties sont des sortes de constantes. Elles sont remplacées par leur valeur 
		lors de l'exécution de Maven en utilisant la notation ${maPropriete} (qui sera remplacée 
		par la valeur de la propriété maPropriete). -->
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>
	
	<!-- =============================================================== -->
	<!-- ***** DEPENDENCIES (=> GESTION DES DEPENDANCES) ***** -->
	<!-- =============================================================== -->
	
	<dependencies>
		
		<!-- ===== BIBLIOTHEQUES TIERCES ===== -->
		
		<!-- Les bibliothèques enregistrées dans le projet parent sont utilisé par ce module. 
			Du coup on peut ajouter ces bibliothèque de la même manière qu'un module. 
			Par exemple, on a pas besoinde spécifier la version. -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope><!-- C'est également la valeur par défault. -->
		</dependency>
		
	</dependencies>
	
	<!-- =============================================================== -->
	<!-- ***** PROFILS ***** -->
	<!-- =============================================================== -->
	
	<!-- Creation de deux profiles spécifiés par un id -->
	<profiles>
		<profile>
			<id>test</id>
			<!-- On configure le build propre à chaque environnement, ici le profile test -->
			<build>
				<resources><!-- Cela marche également avec les balises <plugins><plugin> -->
					<resource>
						<!-- On précise que l'on utilisera ce fichier en spécifiant l'id test -->
						<!-- Les fichiers contenus dans src/main/resources/conf-test seront filtrés, c'est à dire 
							que Maven va chercher à l'intérieur de ces fichiers les propriétés et les remplacer par 
							leurs valeurs comme il le fait naturellement dans fichier pom.xml -->
						<directory>src/main/resources/conf-test</directory>
						<filtering>true</filtering>
					</resource>
				</resources>
			</build>
		</profile>
		<profile>
			<id>prod</id>
			<!-- On configure le build propre à chaque environnement, ici le profile prod -->
			<build>
				<resources>
					<resource>
						<!-- On précise que l'on utilisera ce fichier en spécifiant l'id prod -->
						<!-- Les fichiers contenus dans src/main/resources/conf-prod seront filtrés, c'est à dire 
							que Maven va chercher à l'intérieur de ces fichiers les propriétés et les remplacer par 
							leurs valeurs comme il le fait naturellement dans fichier pom.xml -->
						<directory>src/main/resources/conf-prod</directory>
						<filtering>true</filtering>
					</resource>
				</resources>
			</build>
		</profile>
		
		<!-- Afin qu'aucune version SNAPSHOT ne soit envoyée en production, il faut utiliser le plugin maven-enforcer-plugin. 
			Cependant, comme cette vérification concerne uniquement les constructions ayant pour cible la production, il faut 
			 ajouter l'exécution de ce plugin dans un profil dédié à la cible production. Il faut donc ajouter le plugin au build du 
			 profil target-prod : -->
		<profile>
            <id>target-prod</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-enforcer-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>enforce-target-prod-no-snapshot</id>
                                <phase>validate</phase>
                                <goals>
                                    <goal>enforce</goal>
                                </goals>
                                <configuration>
                                    <rules>
                                        <!-- Le projet et son parent ne doivent pas être en SNAPSHOT -->
                                        <requireReleaseVersion />
                                        <!-- Aucune dépendance ne doit être en SNAPSHOT -->
                                        <requireReleaseDeps />
                                    </rules>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
	</profiles>
	
	<!-- =============================================================== -->
    <!-- ***** BUILD ***** -->
    <!-- =============================================================== -->
    
	<build>
        <plugins>
        	<!-- Création du jar -->
            <plugin>
            	<!-- Ce plugin est déjà configuré dans le projet parent, il est donc inutile 
            		d'ajouter la balise version. -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <!--  Configuration de la classe Main de ce module via le goal jar du plugin 
                	"maven-jar-plugin" -->
                <configuration>
                    <archive>
                        <manifest>
                        	<!-- On définit la classe Main obligatoire pour un fichier jar -->
                            <mainClass>org.exemple.demo.model.App</mainClass>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
        </plugins>
    </build>
	
</project>
